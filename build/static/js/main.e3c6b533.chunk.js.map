{"version":3,"sources":["api/fetchWeather.js","App.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","response","data","App","useState","setQuery","weather","setWeather","search","event","key","className","type","placeholder","value","onChange","target","onKeyPress","main","name","sys","country","Math","round","temp","src","icon","alt","description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAKaA,EAAY,uCAAG,WAAQC,GAAR,eAAAC,EAAA,sEACHC,IAAMC,IAJnB,kDAI6B,CACrCC,OAAQ,CACNC,EAAGL,EACHM,MAAO,SACPC,MAPU,sCAEY,cACpBC,EADoB,yBAQnBA,EAASC,MARU,2CAAH,sDCkDVC,G,MAlDH,WAAO,IAAD,EAEYC,mBAAU,IAFtB,mBAERX,EAFQ,KAEDY,EAFC,OAGgBD,mBAAU,IAH1B,mBAGRE,EAHQ,KAGCC,EAHD,KAMVC,EAAM,uCAAG,WAAQC,GAAR,eAAAf,EAAA,yDACM,UAAde,EAAMC,IADE,gCAGQlB,EAAcC,GAHtB,OAGLS,EAHK,OAKXK,EAAYL,GACZG,EAAU,IANC,2CAAH,sDAUZ,OACE,yBAAKM,UAAU,kBACb,2BACEC,KAAK,OACLD,UAAU,SACVE,YAAY,YACZC,MAAQrB,EACRsB,SAAW,SAAEN,GAAF,OAAaJ,EAAUI,EAAMO,OAAOF,QAC/CG,WAAaT,IAGbF,EAAQY,MACR,yBAAKP,UAAU,QACb,wBAAIA,UAAU,aACZ,8BAAQL,EAAQa,MAChB,6BAAOb,EAAQc,IAAIC,UAGrB,yBAAKV,UAAU,aACXW,KAAKC,MAAOjB,EAAQY,KAAKM,MAC3B,uCAGF,yBAAKb,UAAU,QACb,yBAAKA,UAAU,YAAYc,IAAG,4CAAyCnB,EAAQA,QAAS,GAAIoB,KAA9D,WAA+EC,IAAMrB,EAAQA,QAAS,GAAIsB,cACxI,2BAAKtB,EAAQA,QAAS,GAAIsB,kBCxCtCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.e3c6b533.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst API_KEY = 'f33a484cf794d08d0148764789aaba32';\r\n\r\nexport const fetchWeather = async ( query ) => {\r\n  const response = await axios.get( URL, {\r\n    params: {\r\n      q: query,\r\n      units: 'metric',\r\n      APPID: API_KEY\r\n    }\r\n  } )\r\n  return response.data\r\n}","import React, { useState } from 'react';\n\nimport { fetchWeather } from './api/fetchWeather'\nimport './App.css'\n\nconst App = () => {\n\n  const [ query, setQuery ] = useState( \"\" )\n  const [ weather, setWeather ] = useState( {} )\n\n\n  const search = async ( event ) => {\n    if ( event.key === 'Enter' )\n    {\n      const data = await fetchWeather( query )\n\n      setWeather( data )\n      setQuery( '' )\n    }\n  }\n\n  return (\n    <div className=\"main-container\">\n      <input\n        type=\"text\"\n        className=\"search\"\n        placeholder=\"Search...\"\n        value={ query }\n        onChange={ ( event ) => setQuery( event.target.value ) }\n        onKeyPress={ search }\n      />\n\n      { weather.main && (\n        <div className=\"city\">\n          <h2 className=\"city-name\">\n            <span>{ weather.name }</span>\n            <sup>{ weather.sys.country }</sup>\n          </h2>\n\n          <div className=\"city-temp\">\n            { Math.round( weather.main.temp ) }\n            <sup>&deg;C</sup>\n          </div>\n\n          <div className=\"info\">\n            <img className=\"city-icon\" src={ `https://openweathermap.org/img/wn/${ weather.weather[ 0 ].icon }@2x.png` } alt={ weather.weather[ 0 ].description } />\n            <p>{ weather.weather[ 0 ].description }</p>\n          </div>\n\n        </div>\n      ) }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}